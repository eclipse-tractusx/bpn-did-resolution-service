#################################################################################
#  Copyright (c) 2023 Bayerische Motoren Werke Aktiengesellschaft (BMW AG)
#  Copyright (c) 2021,2023 Contributors to the Eclipse Foundation
#
#  See the NOTICE file(s) distributed with this work for additional
#  information regarding copyright ownership.
#
#  This program and the accompanying materials are made available under the
#  terms of the Apache License, Version 2.0 which is available at
#  https://www.apache.org/licenses/LICENSE-2.0.
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
#  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
#  License for the specific language governing permissions and limitations
#  under the License.
#
#  SPDX-License-Identifier: Apache-2.0
#################################################################################


---
name: "Upgradeability Tests"

on:
  workflow_call:
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:

  test-prepare:
    runs-on: ubuntu-latest
    steps:
      - name: Cache ContainerD Image Layers
        uses: actions/cache@v4
        with:
          path: /var/lib/containerd/io.containerd.snapshotter.v1.overlayfs
          key: ${{ runner.os }}-io.containerd.snapshotter.v1.overlayfs

  test-upgradeability:
    runs-on: ubuntu-latest
    needs: [ test-prepare ]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: "Setup Helm"
        uses: azure/setup-helm@v4
        with:
          version: v3.16.1

      - name: "Setup Kubectl"
        uses: azure/setup-kubectl@v4
        with:
          version: 'v1.31.1'

      - name: Create k8s Kind Cluster
        uses: helm/kind-action@v1.12.0

      - name: "Update helm repo"
        run: |
          helm repo add tractusx https://eclipse-tractusx.github.io/charts/dev
          helm repo update tractusx

      - name: "Get latest released version"
        id: get-version
        run: |
          RELEASED_VERSION=$(helm search repo tractusx/bdrs-server -l -o json | jq -r 'map(select(.version !="0.5.1" and .version !="0.0.5")) | first | .version') 
          echo "Last official release is $RELEASED_VERSION"
          echo "RELEASE=$RELEASED_VERSION" >> $GITHUB_ENV
          exit 0

      - name: "Install Vault chart"
        shell: bash
        run: |
          helm repo add hashicorp https://helm.releases.hashicorp.com  
          
          helm install vault hashicorp/vault \
          -f system-tests/helm/values-vault-test.yaml \
          --wait-for-jobs --timeout=120s --dependency-update
          
          # wait for Vault pod to become ready
          kubectl wait --for=condition=ready pod \
          --selector=app.kubernetes.io/name=vault \
          --timeout=90s

      - name: "Install latest release"
        run: |
          helm install bdrs-server tractusx/bdrs-server \
           --set server.image.pullPolicy="Always" \
           --set server.image.tag="$RELEASE" \
           --set server.image.repository="tractusx/bdrs-server" \
           -f system-tests/helm/values-test.yaml \
           --wait-for-jobs --timeout=120s --dependency-update \
            --version $RELEASE
          
          # wait for the pod to become ready
          kubectl rollout status deployment bdrs-server

      - if: failure()
        run:
          kubectl logs deployment/bdrs-server

      - uses: ./.github/actions/setup-java

      - name: "Build docker images"
        shell: bash
        run: |-
          ./gradlew :runtimes:bdrs-server:dockerize

      - name: "Load images into KinD"
        shell: bash
        run: |
          kind get clusters | xargs -n1 kind load docker-image bdrs-server:latest --name

      - name: "Install new chart"
        run: |
          helm upgrade --install bdrs-server charts/bdrs-server \
            --set server.image.pullPolicy="Never" \
            --set server.image.tag="latest" \
            --set server.image.repository="bdrs-server" \
            -f system-tests/helm/values-test.yaml \
            --wait-for-jobs --timeout=120s --dependency-update
          
           # wait for the pod to become ready
          kubectl rollout status deployment bdrs-server
          
          # execute the helm test
          helm test bdrs-server

      - name: Destroy the kind cluster
        if: always()
        shell: bash
        run: >-
          kind get clusters | xargs -n1 kind delete cluster --name
